# Generated by Selenium IDE
#import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestST01ProcessoSeletivo():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    # Cadastro de um novo usuário
    def test_cT01Criarusurio(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1550, 838)
        self.driver.find_element(By.LINK_TEXT, "Sign in").click()
        self.driver.find_element(By.ID, "email_create").send_keys(
            "tandrade@gmail.com")
        self.driver.find_element(
            By.CSS_SELECTOR, "#SubmitCreate > span").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(
            By.CSS_SELECTOR, ".radio-inline:nth-child(3) > .top").click()
        self.driver.find_element(
            By.ID, "customer_firstname").send_keys("Tales")
        self.driver.find_element(
            By.ID, "customer_lastname").send_keys("Andrade")
        self.driver.find_element(By.ID, "passwd").send_keys("12345")
        self.driver.find_element(
            By.CSS_SELECTOR, ".account_creation:nth-child(1) > .form-group:nth-child(7)").click()
        self.driver.find_element(By.ID, "days").click()
        dropdown = self.driver.find_element(By.ID, "days")
        dropdown.find_element(By.XPATH, "//option[. = 'regexp:3\\s+']").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "#days > option:nth-child(4)").click()
        self.driver.find_element(By.ID, "months").click()
        dropdown = self.driver.find_element(By.ID, "months")
        dropdown.find_element(
            By.XPATH, "//option[. = 'regexp:March\\s']").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "#months > option:nth-child(4)").click()
        self.driver.find_element(By.ID, "years").click()
        dropdown = self.driver.find_element(By.ID, "years")
        dropdown.find_element(
            By.XPATH, "//option[. = 'regexp:1997\\s+']").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "#years > option:nth-child(26)").click()
        self.driver.find_element(By.ID, "company").send_keys("Stefanini")
        self.driver.find_element(By.ID, "address1").send_keys(
            "Avenida, Cais do Apolo, 222")
        self.driver.find_element(By.ID, "city").send_keys("Recife")
        dropdown = self.driver.find_element(By.ID, "id_state")
        dropdown.find_element(By.XPATH, "//option[. = 'Alaska']").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "#id_state > option:nth-child(3)").click()
        self.driver.find_element(By.ID, "postcode").send_keys("50030")
        self.driver.find_element(By.ID, "id_country").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "#id_country > option:nth-child(2)").click()
        self.driver.find_element(
            By.ID, "phone_mobile").send_keys("81987110826")
        self.driver.find_element(By.ID, "alias").send_keys(
            "talesandrade@hotmail.com")
        self.driver.find_element(
            By.CSS_SELECTOR, "#submitAccount > span").click()
        self.driver.implicitly_wait(10)
        assert self.driver.find_element(
            By.CSS_SELECTOR, ".page-heading").text == "MY ACCOUNT"

    # Valida se o usuário cadastrado consegue fazer login
    def test_cT02Validarusurio(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1552, 840)
        self.driver.find_element(By.LINK_TEXT, "Sign in").click()
        self.driver.find_element(By.ID, "email").send_keys(
            "tandrade@gmail.com")
        self.driver.find_element(By.ID, "passwd").send_keys("12345")
        self.driver.find_element(
            By.CSS_SELECTOR, "#SubmitLogin > span").click()
        self.driver.implicitly_wait(10)
        assert self.driver.find_element(
            By.CSS_SELECTOR, ".page-heading").text == "MY ACCOUNT"

    # Realiza a compra de uma camiseta
    def test_cT03Realizarcompra(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1552, 840)
        self.driver.find_element(By.ID, "search_query_top").click()
        self.driver.find_element(
            By.ID, "search_query_top").send_keys("t-shirt")
        self.driver.find_element(
            By.ID, "search_query_top").send_keys(Keys.ENTER)
        self.driver.find_element(By.CSS_SELECTOR, ".lnk_view > span").click()
        self.driver.find_element(By.ID, "group_1").click()
        dropdown = self.driver.find_element(By.ID, "group_1")
        dropdown.find_element(By.XPATH, "//option[. = 'M']").click()
        self.driver.find_element(By.ID, "color_14").click()
        self.driver.find_element(By.CSS_SELECTOR, ".exclusive > span").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".button-medium > span").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".standard-checkout > span").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".button:nth-child(4) > span").click()
        self.driver.find_element(By.ID, "cgv").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".standard-checkout > span").click()
        self.driver.find_element(
            By.LINK_TEXT, "Pay by bank wire (order processing will be longer)").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "#cart_navigation span").click()
        self.driver.find_element(By.CSS_SELECTOR, ".box").click()
        assert self.driver.find_element(
            By.CSS_SELECTOR, ".cheque-indent > .dark").text == "Your order on My Store is complete."
        self.driver.find_element(By.LINK_TEXT, "Back to orders").click()

    # Valida se os dados cadastrados foram salvos corretamente
    def test_cT04Validarinformacoes(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1552, 840)
        self.driver.find_element(By.CSS_SELECTOR, ".account > span").click()
        self.driver.find_element(
            By.CSS_SELECTOR, "li:nth-child(4) span:nth-child(2)").click()
        assert self.driver.find_element(
            By.ID, "id_gender1").is_selected() is True
        self.driver.find_element(By.ID, "firstname").click()
        value = self.driver.find_element(
            By.ID, "firstname").get_attribute("value")
        assert value == "Tales"
        value = self.driver.find_element(
            By.ID, "lastname").get_attribute("value")
        assert value == "Andrade"
        value = self.driver.find_element(By.ID, "email").get_attribute("value")
        assert value == "tandrade@gmail.com"
        value = self.driver.find_element(By.ID, "days").get_attribute("value")
        assert value == "3"
        value = self.driver.find_element(
            By.ID, "months").get_attribute("value")
        assert value == "3"
        value = self.driver.find_element(By.ID, "years").get_attribute("value")
        assert value == "1997"

    # Faz o login e verifica quantos itens o usuário tem na wishlist para validar o redirecionamento
    def test_cT05Logarcomwishlist(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1552, 840)
        self.driver.find_element(By.LINK_TEXT, "Sign in").click()
        self.driver.find_element(By.ID, "email").send_keys(
            "tandrade@gmail.com")
        self.driver.find_element(By.ID, "passwd").send_keys("12345")
        self.driver.find_element(
            By.CSS_SELECTOR, "#SubmitLogin > span").click()
        assert self.driver.title == "My account - My Store"
        self.driver.find_element(By.CSS_SELECTOR, ".lnk_wishlist span").click()
        self.vars["qtd_wish"] = self.driver.find_element(
            By.CSS_SELECTOR, ".bold").text
        if self.driver.execute_script("return (arguments[0]==0)", self.vars["qtd_wish"]):
            print(str("sucesso"))
        else:
            print(str("falha"))

    # Realizar o logout do sistema e é redirecionado para a home
    def test_cT06Logout(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1552, 840)
        self.driver.find_element(By.LINK_TEXT, "Sign out").click()
        assert self.driver.title == "My Store"

    # Valida se é exibido mensagem de erro ao cadastrar usuário já existente
    def test_cT07Criarusurioduplicado(self):
        self.driver.get("http://automationpractice.com/index.php")
        self.driver.set_window_size(1552, 840)
        self.driver.find_element(By.LINK_TEXT, "Sign in").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.ID, "email_create").send_keys(
            "tandrade@gmail.com")
        self.driver.find_element(
            By.CSS_SELECTOR, "#SubmitCreate > span").click()
        self.driver.implicitly_wait(10)
        assert self.driver.find_element(
            By.CSS_SELECTOR, "ol > li").text == "An account using this email address has already been registered. Please enter a valid password or request a new one."


teste = TestST01ProcessoSeletivo()

teste.setup_method("")
teste.test_cT01Criarusurio()
teste.test_cT02Validarusurio()
teste.test_cT03Realizarcompra()
teste.test_cT04Validarinformacoes()
teste.test_cT06Logout()
teste.test_cT05Logarcomwishlist()
teste.test_cT06Logout()
teste.test_cT07Criarusurioduplicado()
teste.teardown_method("")
